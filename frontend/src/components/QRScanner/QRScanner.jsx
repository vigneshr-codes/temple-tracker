import { useState, useEffect, useRef } from "react";
import { Dialog, Transition } from "@headlessui/react";
import { Fragment } from "react";
import { Html5QrcodeScanner } from "html5-qrcode";
import { XMarkIcon, CameraIcon, ExclamationTriangleIcon, CheckCircleIcon, ClockIcon, TagIcon, UserIcon, CalendarIcon, CubeIcon, QrCodeIcon } from "@heroicons/react/24/outline";

const QRScanner = ({ isOpen, onClose, onScanSuccess: onScanSuccessCallback, onScanError: onScanErrorCallback }) => {
  const [isScanning, setIsScanning] = useState(false);
  const [scannedItem, setScannedItem] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState("");
  const [showItemDetails, setShowItemDetails] = useState(false);
  // eslint-disable-next-line no-unused-vars
  const scannerRef = useRef(null);
  const html5QrcodeScannerRef = useRef(null);

  useEffect(() => {
    // Don't auto-start scanner - let user click button

    return () => {
      if (html5QrcodeScannerRef.current) {
        stopScanner();
      }
    };
  }, [isOpen]);

  const startScanner = async () => {
    setIsScanning(true);
    setError("");
    setScannedItem(null);
    setShowItemDetails(false);

    try {
      // Check camera permissions first
      try {
        const stream = await navigator.mediaDevices.getUserMedia({ video: true });
        stream.getTracks().forEach(track => track.stop()); // Stop the test stream
        // eslint-disable-next-line no-unused-vars
      } catch (permissionError) {
        throw new Error("Camera access denied. Please allow camera permissions in your browser settings.");
      }

      // Wait a bit for DOM to be ready
      await new Promise(resolve => setTimeout(resolve, 100));

      const config = {
        fps: 10,
        qrbox: { width: 280, height: 280 },
        aspectRatio: 1.0,
        disableFlip: false,
        rememberLastUsedCamera: true,
        showTorchButtonIfSupported: true,
        videoConstraints: {
          facingMode: "environment", // Use back camera
          width: { min: 640, ideal: 1280, max: 1920 },
          height: { min: 480, ideal: 720, max: 1080 }
        }
      };

      // Check if element exists before rendering
      const readerElement = document.getElementById("qr-reader");
      if (!readerElement) {
        throw new Error("QR reader element not found");
      }

      html5QrcodeScannerRef.current = new Html5QrcodeScanner("qr-reader", config, false);
      html5QrcodeScannerRef.current.render(onScanSuccess, onScanFailure);
    } catch (error) {
      console.error("Failed to start scanner:", error);
      setError(error.message || "Failed to start camera. Please ensure camera permissions are granted.");
      setIsScanning(false);
    }
  };

  const stopScanner = () => {
    if (html5QrcodeScannerRef.current) {
      html5QrcodeScannerRef.current.clear();
      html5QrcodeScannerRef.current = null;
    }
    setIsScanning(false);
  };

  const onScanSuccess = async (decodedText, decodedResult) => {
    setIsLoading(true);
    setError("");

    try {
      // Stop scanner immediately after successful scan
      stopScanner();

      console.log("QR Code scanned:", decodedText);
      console.log("Decoded result:", decodedResult);

      // Validate that the scanned text looks like JSON
      try {
        const testParse = JSON.parse(decodedText);
        console.log("Parsed QR data:", testParse);

        if (!testParse.inventoryId) {
          throw new Error("QR code does not contain inventory data");
        }
      } catch (parseError) {
        console.error("QR data parsing error:", parseError);
        setError("This QR code is not a valid inventory item code. Please scan a QR code generated by the system.");
        setIsLoading(false);
        return;
      }

      const token = localStorage.getItem("temple_token");
      console.log("Token check:", token ? "Token found" : "No token found");

      if (!token) {
        console.log("No token - setting auth error");
        setError("Please login to scan QR codes. Close this scanner and login first.");
        setIsLoading(false);
        // Don't redirect automatically, let user close the scanner
        return;
      }

      console.log("Using token:", token ? "Token present" : "No token");
      console.log("About to make API call to:", `http://localhost:3001/api/inventory/scan/${encodeURIComponent(decodedText)}`);

      const response = await fetch(`http://localhost:3001/api/inventory/scan/${encodeURIComponent(decodedText)}`, {
        method: "GET",
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json"
        }
      });

      if (response.status === 401) {
        setError("Authentication expired. Please login again and try scanning.");
        setIsLoading(false);
        // Don't redirect automatically, let user close the scanner
        return;
      }

      const data = await response.json();
      console.log("API response:", data);
      console.log("Response status:", response.status);
      console.log("Response ok:", response.ok);

      if (response.ok && data.success) {
        console.log("Setting scanned item:", data.data);
        setScannedItem(data.data);
        setShowItemDetails(true);
        setError(""); // Clear any previous errors
        onScanSuccessCallback?.(data.data, data.scannedData);
      } else {
        console.log("API call failed:", data);
        setError(data.message || "Item not found");
        onScanErrorCallback?.(data.message);
      }
    } catch (error) {
      console.error("Scan API error:", error);
      setError("Failed to scan QR code. Please try again.");
      onScanErrorCallback?.("Failed to scan QR code");
    } finally {
      setIsLoading(false);
    }
  };

  const onScanFailure = error => {
    // Ignore frequent scan failures - they're normal
    if (!error.includes("No MultiFormat Readers") && !error.includes("QR code parse error")) {
      console.warn("QR scan error:", error);
      // Only set error for serious issues, not normal scan misses
      if (error.includes("Camera") || error.includes("permission")) {
        setError("Camera access denied. Please allow camera permissions and try again.");
        setIsScanning(false);
      }
    }
  };

  const handleClose = () => {
    stopScanner();
    setScannedItem(null);
    setShowItemDetails(false);
    setError("");
    onClose();
  };

  const handleStartNewScan = () => {
    setScannedItem(null);
    setShowItemDetails(false);
    setError("");
    startScanner();
  };

  const formatDate = dateString => {
    return new Date(dateString).toLocaleDateString("en-IN", {
      year: "numeric",
      month: "short",
      day: "numeric"
    });
  };

  const getStatusColor = status => {
    switch (status) {
      case "available":
        return "text-green-600 bg-green-100";
      case "used":
        return "text-gray-600 bg-gray-100";
      case "expired":
        return "text-red-600 bg-red-100";
      case "damaged":
        return "text-yellow-600 bg-yellow-100";
      default:
        return "text-gray-600 bg-gray-100";
    }
  };

  return (
    <Transition.Root show={isOpen} as={Fragment}>
      <Dialog as="div" className="relative z-50" onClose={handleClose}>
        <Transition.Child as={Fragment} enter="ease-out duration-300" enterFrom="opacity-0" enterTo="opacity-100" leave="ease-in duration-200" leaveFrom="opacity-100" leaveTo="opacity-0">
          <div className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" />
        </Transition.Child>

        <div className="fixed inset-0 z-10 overflow-y-auto">
          <div className="flex min-h-full items-center justify-center p-4">
            <Transition.Child as={Fragment} enter="ease-out duration-300" enterFrom="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95" enterTo="opacity-100 translate-y-0 sm:scale-100" leave="ease-in duration-200" leaveFrom="opacity-100 translate-y-0 sm:scale-100" leaveTo="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95">
              <Dialog.Panel className="relative transform overflow-hidden rounded-lg bg-white shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg">
                {/* Header */}
                <div className="bg-gradient-to-r from-temple-600 to-saffron-500 px-4 py-3 sm:px-6">
                  <div className="flex items-center justify-between">
                    <Dialog.Title className="text-lg font-medium text-white flex items-center">
                      <CameraIcon className="h-6 w-6 mr-2" />
                      QR Scanner
                    </Dialog.Title>
                    <button type="button" className="rounded-md bg-white bg-opacity-20 text-white hover:bg-opacity-30 focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-temple-600" onClick={handleClose}>
                      <XMarkIcon className="h-6 w-6" />
                    </button>
                  </div>
                </div>

                <div className="px-4 py-5 sm:px-6">
                  {/* Initial State */}
                  {!isScanning && !showItemDetails && !isLoading && !error && (
                    <div className="text-center py-8">
                      <QrCodeIcon className="h-16 w-16 text-gray-400 mx-auto mb-4" />
                      <h3 className="text-lg font-medium text-gray-900 mb-2">QR Code Scanner</h3>
                      <p className="text-sm text-gray-600 mb-4">Click "Start Scanning" to begin scanning QR codes</p>
                      <button onClick={startScanner} className="px-6 py-3 bg-gradient-to-r from-temple-600 to-saffron-500 text-white text-sm font-medium rounded-md hover:from-temple-700 hover:to-saffron-600 transition-all focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-temple-500">
                        Start Scanning
                      </button>
                    </div>
                  )}

                  {/* Scanner View */}
                  {isScanning && !showItemDetails && (
                    <div className="text-center">
                      <div className="mb-4">
                        <div id="qr-reader" className="mx-auto border rounded-lg overflow-hidden" style={{ minHeight: "350px", width: "100%", maxWidth: "400px" }}></div>
                      </div>
                      <p className="text-sm text-gray-600 mb-4">Position the QR code within the frame to scan</p>
                      <div className="flex justify-center space-x-3">
                        <button onClick={handleClose} className="px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                          Cancel
                        </button>
                        <button onClick={handleStartNewScan} className="px-4 py-2 bg-gradient-to-r from-temple-600 to-saffron-500 text-white text-sm font-medium rounded-md hover:from-temple-700 hover:to-saffron-600 transition-all">
                          Restart Camera
                        </button>
                      </div>
                    </div>
                  )}

                  {/* Loading State */}
                  {isLoading && (
                    <div className="text-center py-8">
                      <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-temple-500 mx-auto mb-4"></div>
                      <p className="text-sm text-gray-600">Processing QR code...</p>
                    </div>
                  )}

                  {/* Error State */}
                  {error && !showItemDetails && !isScanning && !isLoading && (
                    <div className="text-center py-8">
                      <ExclamationTriangleIcon className="h-12 w-12 text-red-500 mx-auto mb-4" />
                      <h3 className="text-lg font-medium text-gray-900 mb-2">Scan Failed</h3>
                      <p className="text-sm text-gray-600 mb-4">{error}</p>
                      <div className="flex justify-center space-x-3">
                        <button onClick={handleStartNewScan} className="px-4 py-2 bg-gradient-to-r from-temple-600 to-saffron-500 text-white text-sm font-medium rounded-md hover:from-temple-700 hover:to-saffron-600 transition-all">
                          Try Again
                        </button>
                        <button onClick={handleClose} className="px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                          Cancel
                        </button>
                      </div>
                    </div>
                  )}

                  {/* Item Details View */}
                  {showItemDetails && scannedItem && (
                    <div className="space-y-6">
                      {/* Success Header */}
                      <div className="text-center border-b pb-4">
                        <CheckCircleIcon className="h-12 w-12 text-green-500 mx-auto mb-2" />
                        <h3 className="text-lg font-semibold text-gray-900">Item Scanned Successfully</h3>
                        <p className="text-sm text-gray-600">Item details retrieved from inventory</p>
                      </div>

                      {/* Item Details Card */}
                      <div className="bg-gray-50 rounded-lg p-4 space-y-4">
                        {/* Basic Info */}
                        <div className="grid grid-cols-2 gap-4">
                          <div>
                            <label className="text-xs font-medium text-gray-500 uppercase tracking-wide">Item Type</label>
                            <div className="flex items-center mt-1">
                              <CubeIcon className="h-4 w-4 text-gray-400 mr-2" />
                              <span className="text-sm font-medium text-gray-900 capitalize">{scannedItem.itemType}</span>
                            </div>
                          </div>
                          <div>
                            <label className="text-xs font-medium text-gray-500 uppercase tracking-wide">Status</label>
                            <div className="mt-1">
                              <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium capitalize ${getStatusColor(scannedItem.status)}`}>{scannedItem.status}</span>
                            </div>
                          </div>
                        </div>

                        {/* ID and Quantity */}
                        <div className="grid grid-cols-2 gap-4">
                          <div>
                            <label className="text-xs font-medium text-gray-500 uppercase tracking-wide">Inventory ID</label>
                            <div className="flex items-center mt-1">
                              <TagIcon className="h-4 w-4 text-gray-400 mr-2" />
                              <span className="text-sm font-medium text-gray-900">{scannedItem.inventoryId}</span>
                            </div>
                          </div>
                          <div>
                            <label className="text-xs font-medium text-gray-500 uppercase tracking-wide">Quantity</label>
                            <div className="mt-1">
                              <span className="text-sm text-gray-900">
                                <span className="font-semibold text-temple-600">{scannedItem.remainingQuantity}</span>
                                <span className="text-gray-500">
                                  /{scannedItem.quantity} {scannedItem.unit}
                                </span>
                              </span>
                            </div>
                          </div>
                        </div>

                        {/* Donor Info */}
                        {scannedItem.donor && (
                          <div>
                            <label className="text-xs font-medium text-gray-500 uppercase tracking-wide">Donated By</label>
                            <div className="flex items-center mt-1">
                              <UserIcon className="h-4 w-4 text-gray-400 mr-2" />
                              <span className="text-sm text-gray-900">{scannedItem.donor.name}</span>
                            </div>
                          </div>
                        )}

                        {/* Dates */}
                        <div className="grid grid-cols-2 gap-4">
                          <div>
                            <label className="text-xs font-medium text-gray-500 uppercase tracking-wide">Added On</label>
                            <div className="flex items-center mt-1">
                              <CalendarIcon className="h-4 w-4 text-gray-400 mr-2" />
                              <span className="text-sm text-gray-900">{formatDate(scannedItem.createdAt)}</span>
                            </div>
                          </div>
                          {scannedItem.expiryDate && (
                            <div>
                              <label className="text-xs font-medium text-gray-500 uppercase tracking-wide">Expires On</label>
                              <div className="flex items-center mt-1">
                                <ClockIcon className="h-4 w-4 text-gray-400 mr-2" />
                                <span className="text-sm text-gray-900">{formatDate(scannedItem.expiryDate)}</span>
                              </div>
                            </div>
                          )}
                        </div>

                        {/* Description */}
                        {scannedItem.description && (
                          <div>
                            <label className="text-xs font-medium text-gray-500 uppercase tracking-wide">Description</label>
                            <p className="text-sm text-gray-900 mt-1">{scannedItem.description}</p>
                          </div>
                        )}

                        {/* Storage Location */}
                        <div>
                          <label className="text-xs font-medium text-gray-500 uppercase tracking-wide">Storage Location</label>
                          <p className="text-sm text-gray-900 mt-1">{scannedItem.storageLocation}</p>
                        </div>
                      </div>

                      {/* Quick Actions */}
                      {scannedItem.status === "available" && scannedItem.remainingQuantity > 0 && (
                        <div className="border-t pt-4">
                          <h4 className="text-sm font-medium text-gray-900 mb-3">Quick Actions</h4>
                          <div className="grid grid-cols-2 gap-3">
                            <button
                              onClick={() => {
                                window.location.href = `/inventory?item=${scannedItem._id}&action=use`;
                                handleClose();
                              }}
                              className="px-4 py-2 bg-green-600 text-white text-sm font-medium rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 flex items-center justify-center"
                            >
                              <svg className="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                              </svg>
                              Use Item
                            </button>
                            <button
                              onClick={() => {
                                window.location.href = `/inventory?item=${scannedItem._id}&action=view`;
                                handleClose();
                              }}
                              className="px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 flex items-center justify-center"
                            >
                              <svg className="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                              </svg>
                              View Details
                            </button>
                          </div>
                        </div>
                      )}

                      {/* Action Buttons */}
                      <div className="flex space-x-3">
                        <button onClick={handleStartNewScan} className="flex-1 px-4 py-2 bg-gradient-to-r from-temple-600 to-saffron-500 text-white text-sm font-medium rounded-md hover:from-temple-700 hover:to-saffron-600 transition-all focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-temple-500">
                          Scan Another
                        </button>
                        <button onClick={handleClose} className="flex-1 px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-temple-500">
                          Done
                        </button>
                      </div>
                    </div>
                  )}
                </div>
              </Dialog.Panel>
            </Transition.Child>
          </div>
        </div>
      </Dialog>
    </Transition.Root>
  );
};

export default QRScanner;
